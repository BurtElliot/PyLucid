# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings
import pylucid_migration.base_models.permissions
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BanEntry',
            fields=[
                ('ip_address', models.IPAddressField(help_text='This IP address will be banned.', primary_key=True, verbose_name='Remote IP Address', serialize=False)),
                ('createtime', models.DateTimeField(help_text='Create time')),
            ],
            options={
                'verbose_name_plural': 'IP ban entries',
                'db_table': 'pylucid_banentry',
                'ordering': ('-createtime',),
                'verbose_name': 'IP ban entry',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=128, help_text='Name if this color (e.g. main_color, head_background)')),
                ('value', models.CharField(max_length=18)),
            ],
            options={
                'db_table': 'pylucid_color',
                'ordering': ('colorscheme', 'name'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ColorScheme',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=255, help_text='The name of this color scheme.')),
                ('createby', models.ForeignKey(blank=True, related_name='colorscheme_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='colorscheme_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
            ],
            options={
                'db_table': 'pylucid_colorscheme',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Design',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=150, unique=True, help_text='Name of this design combination')),
                ('template', models.CharField(max_length=128, help_text='filename of the used template for this page')),
                ('colorscheme', models.ForeignKey(blank=True, to='pylucid_migration.ColorScheme', null=True)),
                ('createby', models.ForeignKey(blank=True, related_name='design_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
            ],
            options={
                'db_table': 'pylucid_design',
                'ordering': ('template',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EditableHtmlHeadFile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('filepath', models.CharField(max_length=255, unique=True)),
                ('mimetype', models.CharField(max_length=64, help_text='MIME type for this file. (Leave empty for guess by filename)')),
                ('html_attributes', models.CharField(blank=True, max_length=256, help_text='Additional html tag attributes (CSS example: media="screen")')),
                ('render', models.BooleanField(help_text='Are there CSS ColorScheme entries in the content?', default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('content', models.TextField()),
                ('createby', models.ForeignKey(blank=True, related_name='editablehtmlheadfile_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='editablehtmlheadfile_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
            ],
            options={
                'db_table': 'pylucid_editablehtmlheadfile',
                'ordering': ('filepath',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.CharField(blank=True, max_length=150, help_text='Description of the Language (filled automaticly)')),
                ('createby', models.ForeignKey(blank=True, related_name='language_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='language_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
                ('permitViewGroup', models.ForeignKey(blank=True, related_name='language_permitViewGroup', to='auth.Group', null=True, help_text='Limit viewable to a group for a complete language section?')),
                ('sites', models.ManyToManyField(to='sites.Site')),
            ],
            options={
                'db_table': 'pylucid_language',
                'ordering': ('code',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('app_label', models.CharField(max_length=255, db_index=True, help_text='The App name witch has created this log entry.', verbose_name='App Label')),
                ('action', models.CharField(max_length=128, db_index=True, help_text="Short action key. (e.g.: 'do search', 'login')", verbose_name='Action')),
                ('message', models.CharField(blank=True, max_length=255, help_text="Short/one line log message. (e.g.: 'user FooBar login')", null=True, verbose_name='Message')),
                ('long_message', models.TextField(blank=True, help_text='Complete log message.', null=True, verbose_name='long Message')),
                ('data', models.TextField(blank=True)),
                ('uri', models.CharField(max_length=255, help_text='absolute URI form request.build_absolute_uri()', verbose_name='URL')),
                ('remote_addr', models.IPAddressField(blank=True, db_index=True, null=True, verbose_name='Remote IP Address', help_text="The IP address of the client. From request.META['REMOTE_ADDR']")),
                ('remote_user', models.CharField(blank=True, max_length=255, help_text="The user authenticated by the web server, if any. From request.META['REMOTE_USER']", null=True, verbose_name='Remote User')),
                ('request_method', models.CharField(blank=True, max_length=8, help_text="Request method, e.g.: 'GET', 'POST'. From request.META['REQUEST_METHOD']", null=True, verbose_name='Request Method')),
                ('query_string', models.CharField(blank=True, max_length=255, help_text="The query string, as a single **unparsed** string. From request.META['QUERY_STRING']", null=True, verbose_name='Query String')),
                ('http_referer', models.CharField(blank=True, max_length=255, help_text="The referring page, if any. From request.META['HTTP_REFERER']", null=True, verbose_name='Referer')),
                ('http_user_agent', models.CharField(blank=True, max_length=255, help_text="The client's user-agent string. From request.META['HTTP_USER_AGENT']", null=True, verbose_name='User Agent')),
                ('http_accept_encoding', models.CharField(blank=True, max_length=255, help_text="from request.META['HTTP_ACCEPT_ENCODING']", null=True, verbose_name='Accept Encoding')),
                ('http_accept_language', models.CharField(blank=True, max_length=255, help_text="from request.META['HTTP_ACCEPT_LANGUAGE']", null=True, verbose_name='Accept Language')),
                ('createby', models.ForeignKey(blank=True, related_name='logentry_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='logentry_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
                ('site', models.ForeignKey(to='sites.Site', default=1)),
                ('used_language', models.ForeignKey(blank=True, to='pylucid_migration.Language', null=True)),
            ],
            options={
                'verbose_name_plural': 'log entries',
                'db_table': 'pylucid_logentry',
                'ordering': ('-createtime',),
                'verbose_name': 'log entry',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PageContent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('content', models.TextField()),
                ('markup', models.IntegerField()),
                ('createby', models.ForeignKey(blank=True, related_name='pagecontent_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='pagecontent_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
            ],
            options={
                'verbose_name_plural': 'PageContent',
                'db_table': 'pylucid_pagecontent',
                'ordering': ('-lastupdatetime',),
                'verbose_name': 'PageContent',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PageMeta',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(blank=True, max_length=150, help_text='Sort page name (for link text in e.g. menu)')),
                ('title', models.CharField(blank=True, max_length=256, help_text='A long page title (for e.g. page title or link title text)')),
                ('tags', models.CharField(max_length=765)),
                ('keywords', models.CharField(blank=True, max_length=255, help_text='Keywords for the html header. (separated by commas)')),
                ('description', models.CharField(blank=True, max_length=255, help_text='For html header')),
                ('robots', models.CharField(blank=True, max_length=255, help_text="for html 'robots' meta content.", default='index,follow')),
                ('createby', models.ForeignKey(blank=True, related_name='pagemeta_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('language', models.ForeignKey(to='pylucid_migration.Language')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='pagemeta_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
            ],
            options={
                'verbose_name_plural': 'PageMeta',
                'db_table': 'pylucid_pagemeta',
                'ordering': ('-lastupdatetime',),
                'verbose_name': 'PageMeta',
            },
            bases=(models.Model, pylucid_migration.base_models.permissions.PermissionsBase),
        ),
        migrations.CreateModel(
            name='PageTree',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('position', models.SmallIntegerField(help_text='ordering weight for sorting the pages in the menu.', default=0)),
                ('slug', models.SlugField(help_text='(for building URLs)')),
                ('page_type', models.CharField(max_length=1, choices=[('C', 'CMS-Page'), ('P', 'PluginPage')])),
                ('showlinks', models.BooleanField(help_text="Accessable for all users, but don't put a Link to this page into menu/sitemap etc.", default=True)),
                ('createby', models.ForeignKey(blank=True, related_name='pagetree_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('design', models.ForeignKey(help_text='Page Template, CSS/JS files', to='pylucid_migration.Design')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='pagetree_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
                ('parent', models.ForeignKey(blank=True, to='pylucid_migration.PageTree', null=True, help_text='the higher-ranking father page')),
                ('permitEditGroup', models.ForeignKey(blank=True, related_name='pagetree_permitEditGroup', to='auth.Group', null=True, help_text='Usergroup how can edit this page.')),
                ('permitViewGroup', models.ForeignKey(blank=True, related_name='pagetree_permitViewGroup', to='auth.Group', null=True, help_text='Limit viewable to a group?')),
                ('site', models.ForeignKey(to='sites.Site', default=1)),
            ],
            options={
                'verbose_name_plural': 'PageTree',
                'db_table': 'pylucid_pagetree',
                'ordering': ('-lastupdatetime',),
                'verbose_name': 'PageTree',
            },
            bases=(models.Model, pylucid_migration.base_models.permissions.PermissionsBase),
        ),
        migrations.CreateModel(
            name='PluginPage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('app_label', models.CharField(max_length=768, help_text='The plugin app label witch is in settings.INSTALLED_APPS (Only apps witch can handle a root url.)')),
                ('urls_filename', models.CharField(max_length=256, help_text='Filename of the urls.py', default='urls.py')),
                ('createby', models.ForeignKey(blank=True, related_name='pluginpage_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='pluginpage_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
                ('pagetree', models.OneToOneField(to='pylucid_migration.PageTree')),
            ],
            options={
                'verbose_name_plural': 'PluginPage',
                'db_table': 'pylucid_pluginpage',
                'ordering': ('-lastupdatetime',),
                'verbose_name': 'PluginPage',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID', auto_created=True)),
                ('createtime', models.DateTimeField(help_text='Create time', default=django.utils.timezone.now, editable=False)),
                ('lastupdatetime', models.DateTimeField(help_text='Time of the last change.', default=django.utils.timezone.now, editable=False)),
                ('sha_login_checksum', models.CharField(max_length=192, help_text='Checksum for PyLucid JS-SHA-Login')),
                ('sha_login_salt', models.CharField(max_length=36, help_text='Salt value for PyLucid JS-SHA-Login')),
                ('createby', models.ForeignKey(blank=True, related_name='userprofile_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.')),
                ('lastupdateby', models.ForeignKey(blank=True, related_name='userprofile_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.')),
                ('sites', models.ManyToManyField(to='sites.Site')),
                ('user', models.ForeignKey(unique=True, to=settings.AUTH_USER_MODEL, related_name='userprofile_user')),
            ],
            options={
                'db_table': 'pylucid_userprofile',
                'ordering': ('user',),
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='pagetree',
            unique_together=set([('site', 'slug', 'parent')]),
        ),
        migrations.AddField(
            model_name='pagemeta',
            name='pagetree',
            field=models.ForeignKey(to='pylucid_migration.PageTree'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pagemeta',
            name='permitViewGroup',
            field=models.ForeignKey(blank=True, related_name='pagemeta_permitViewGroup', to='auth.Group', null=True, help_text='Limit viewable this page in this language to a user group?'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='pagemeta',
            unique_together=set([('pagetree', 'language')]),
        ),
        migrations.AddField(
            model_name='pagecontent',
            name='pagemeta',
            field=models.OneToOneField(to='pylucid_migration.PageMeta'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='design',
            name='headfiles',
            field=models.ManyToManyField(blank=True, help_text='Static files (stylesheet/javascript) for this page, included in html head via link tag', to='pylucid_migration.EditableHtmlHeadFile', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='design',
            name='lastupdateby',
            field=models.ForeignKey(blank=True, related_name='design_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='design',
            name='sites',
            field=models.ManyToManyField(to='sites.Site'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='color',
            name='colorscheme',
            field=models.ForeignKey(to='pylucid_migration.ColorScheme'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='color',
            name='createby',
            field=models.ForeignKey(blank=True, related_name='color_createby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User how create this entry.'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='color',
            name='lastupdateby',
            field=models.ForeignKey(blank=True, related_name='color_lastupdateby', to=settings.AUTH_USER_MODEL, null=True, editable=False, help_text='User as last edit this entry.'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='color',
            unique_together=set([('colorscheme', 'name')]),
        ),
    ]
